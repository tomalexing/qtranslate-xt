{"version":3,"file":"index.js","mappings":"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","sources":["webpack://plugin/../../../node_modules/@wordpress/icons/build-module/library/language.js","webpack://plugin/./store/actions.js","webpack://plugin/./store/constants.js","webpack://plugin/./store/controls.js","webpack://plugin/./store/fetch.js","webpack://plugin/./store/index.js","webpack://plugin/./store/reducer.js","webpack://plugin/./store/resolvers.js","webpack://plugin/./store/selectors.js","webpack://plugin/external window \"React\"","webpack://plugin/external window [\"wp\",\"blockEditor\"]","webpack://plugin/external window [\"wp\",\"blocks\"]","webpack://plugin/external window [\"wp\",\"components\"]","webpack://plugin/external window [\"wp\",\"compose\"]","webpack://plugin/external window [\"wp\",\"coreData\"]","webpack://plugin/external window [\"wp\",\"data\"]","webpack://plugin/external window [\"wp\",\"editPost\"]","webpack://plugin/external window [\"wp\",\"element\"]","webpack://plugin/external window [\"wp\",\"hooks\"]","webpack://plugin/external window [\"wp\",\"i18n\"]","webpack://plugin/external window [\"wp\",\"plugins\"]","webpack://plugin/external window [\"wp\",\"primitives\"]","webpack://plugin/webpack/bootstrap","webpack://plugin/webpack/runtime/compat get default export","webpack://plugin/webpack/runtime/define property getters","webpack://plugin/webpack/runtime/hasOwnProperty shorthand","webpack://plugin/webpack/runtime/make namespace object","webpack://plugin/./index.js"],"sourcesContent":["import { createElement } from \"react\";\n/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\nconst language = createElement(SVG, {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  viewBox: \"0 0 24 24\"\n}, createElement(Path, {\n  d: \"M17.5 10h-1.7l-3.7 10.5h1.7l.9-2.6h3.9l.9 2.6h1.7L17.5 10zm-2.2 6.3 1.4-4 1.4 4h-2.8zm-4.8-3.8c1.6-1.8 2.9-3.6 3.7-5.7H16V5.2h-5.8V3H8.8v2.2H3v1.5h9.6c-.7 1.6-1.8 3.1-3.1 4.6C8.6 10.2 7.8 9 7.2 8H5.6c.6 1.4 1.7 2.9 2.9 4.4l-2.4 2.4c-.3.4-.7.8-1.1 1.2l1 1 1.2-1.2c.8-.8 1.6-1.5 2.3-2.3.8.9 1.7 1.7 2.5 2.5l.6-1.5c-.7-.6-1.4-1.3-2.1-2z\"\n}));\nexport default language;\n//# sourceMappingURL=language.js.map","import {CURRENT_LANGUAGE, FETCH_LANGUAGES, SET_LANGUAGES} from './constants'\r\n\r\n\r\n/**\r\n * Action: Set Current Language\r\n */\r\nexport function setCurrentLanguage(value) {\r\n    return {\r\n        type: CURRENT_LANGUAGE,\r\n        value,\r\n    }\r\n}\r\n/**\r\n * Action: Set fetchLanguages Languages\r\n */\r\nexport function fetchLanguages() {\r\n    return {\r\n        type: FETCH_LANGUAGES,\r\n    }\r\n}\r\n/**\r\n * Action: Set Languages\r\n */\r\nexport function setLanguages(value) {\r\n    return {\r\n        type: SET_LANGUAGES,\r\n        value,\r\n    }\r\n}\r\n","export const cookieKey = 'switch_qtx_lang';\r\nconst cookieArray = document.cookie.matchAll(new RegExp(String.raw`${cookieKey}=(.[^;])`,'g')).next().value;\r\nconst cookieValue = cookieArray ? cookieArray[1] : 'en';\r\nexport const DEFAULT_STATE = {\r\n    currentLanguage: cookieValue ?? window.QtranslateAjax?.settings.default_language ?? 'en',\r\n    previousLanguage: cookieValue ?? window.QtranslateAjax?.settings.default_language ?? 'en',\r\n    languages:  {},\r\n};\r\n\r\nexport const CURRENT_LANGUAGE = 'CURRENT_LANGUAGE';\r\nexport const FETCH_LANGUAGES = 'FETCH_LANGUAGES';\r\nexport const SET_LANGUAGES = 'SET_LANGUAGES';","import { getSettings } from \"./fetch\";\r\n/**\r\n * Fetch Languages from Database using AJAX\r\n * @returns {Object || false}\r\n */\r\nexport function FETCH_LANGUAGES(action) {\r\n    return getSettings().then(response => {\r\n        if (response && typeof response === 'object') {\r\n            if (response['default_language'] && typeof response['language_config'] === 'object') {\r\n                return response\r\n            }\r\n            else {\r\n                return false\r\n            }\r\n        }\r\n        else {\r\n            return false\r\n        }\r\n    });\r\n}","/**\r\n * Function for Get Settings\r\n * @returns\r\n */\r\n\r\nconst nonce = window.QtranslateAjax.admin_nonce;\r\nconst getSettingsAction = 'qtranslate_options';\r\n\r\nexport const getSettings = () => {\r\n    let data = new FormData();\r\n    data.append(\"admin_nonce\", nonce);\r\n    data.append(\"action\", getSettingsAction);\r\n\r\n    return fetch(QtranslateAjax.ajax_url, {\r\n        method: 'POST',\r\n        body: data,\r\n    }) // wrapped\r\n        .then(res => res.text())\r\n        .then(data => {\r\n            const response = JSON.parse(data);\r\n            if (response.success) {\r\n                return response.data\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n}","/**\r\n * Store Setup\r\n */\r\nimport {\r\n    createReduxStore,\r\n    register,\r\n    select,\r\n    subscribe,\r\n    dispatch,\r\n    combineReducers\r\n} from '@wordpress/data';\r\n\r\nimport * as actions from \"./actions\"\r\nimport * as selectors from \"./selectors\"\r\nimport * as controls from \"./controls\"\r\nimport * as resolvers from \"./resolvers\"\r\nimport reducer from \"./reducer\"\r\n\r\n\r\n/**\r\n * Create WP Redux Store\r\n */\r\nconst store = createReduxStore(\r\n    'qtranslate-xt',\r\n    {\r\n        reducer,\r\n        actions,\r\n        selectors,\r\n        controls,\r\n        resolvers\r\n    }\r\n);\r\n\r\nregister(store);\r\n\r\n\r\n/**\r\n * Save Global Values on Save Page/Post\r\n */\r\n\r\nsubscribe(() => {\r\n \r\n\r\n    // const isSavingPost = select('core/editor').isSavingPost();\r\n    // const isAutosavingPost = select('core/editor').isAutosavingPost();\r\n\r\n    // const ebIsSaving = select('essential-blocks').getIsSaving()\r\n    // console.log(ebIsSaving, isAutosavingPost, isSavingPost)\r\n \r\n    // if (!ebIsSaving || isAutosavingPost || !isSavingPost) {\r\n    //     return;\r\n    // }\r\n    // /**\r\n    //  * Action\r\n    //  */\r\n    // //Global Colors\r\n    // const getLanguages = select('qtranslate-xt').getLanguages()\r\n    // console.log(getLanguages)\r\n \r\n});","import {DEFAULT_STATE,\r\n    CURRENT_LANGUAGE,\r\n    FETCH_LANGUAGES,\r\n    SET_LANGUAGES} from './constants'\r\n\r\n\r\nexport default function reducer(state = DEFAULT_STATE, action) {\r\n    switch (action.type) {\r\n        case CURRENT_LANGUAGE:\r\n            return {\r\n                ...state,\r\n                previousLanguage: state.currentLanguage,\r\n                currentLanguage: action.value,\r\n            };\r\n        case FETCH_LANGUAGES:\r\n            return state;\r\n        case SET_LANGUAGES:\r\n            return {\r\n                ...state,\r\n                languages: { ...action.value.language_config }\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import * as actions from \"./actions\";\r\n\r\n\r\n/**\r\n * getLanguages resolver\r\n * @returns\r\n */\r\nexport function* getLanguages() {\r\n    let languages = yield actions.fetchLanguages();\r\n    return actions.setLanguages(languages)\r\n}\r\n","/**\r\n * Selector: Get Current Language\r\n * @param {*} state\r\n * @returns\r\n */\r\nexport function getCurrentLanguage(state) {\r\n    const { currentLanguage } = state\r\n    return currentLanguage;\r\n}\r\n/**\r\n * Selector: Get Previous Language\r\n * @param {*} state\r\n * @returns\r\n */\r\nexport function getPreviousLanguage(state) {\r\n    const { previousLanguage } = state\r\n    return previousLanguage;\r\n}\r\n\r\n\r\n/**\r\n * Selector: Get languages\r\n * @param {*} state\r\n * @returns\r\n */\r\nexport function getLanguages(state) {\r\n    const { languages } = state\r\n    return languages;\r\n}","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"compose\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"editPost\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"hooks\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"wp\"][\"plugins\"];","module.exports = window[\"wp\"][\"primitives\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerPlugin } from '@wordpress/plugins';\r\nimport { language, more } from '@wordpress/icons';\r\nimport { PluginSidebar as  PluginSidebarPost } from \"@wordpress/edit-post\";\r\nimport { __ } from \"@wordpress/i18n\";\r\nimport { addFilter, addAction, removeFilter } from \"@wordpress/hooks\";\r\nimport { useState, useEffect, useRef, useCallback, useMemo } from \"@wordpress/element\";\r\nimport { PanelBody, Button, Popover, Dashicon, TabPanel, PanelRow, \r\n     __experimentalText as Text, __experimentalHStack as HStack, Dropdown,\r\n    DropdownMenu, MenuItem, MenuGroup, SelectControl  } from \"@wordpress/components\";\r\n\r\nimport { dispatch, useSelect, withSelect, withDispatch, useDispatch } from \"@wordpress/data\";\r\nimport { store as coreDataStore } from \"@wordpress/core-data\";\r\nimport {\r\n    __experimentalColorGradientControl as ColorGradientControl,\r\n    BlockPreview,\r\n    PanelColorSettings\r\n} from \"@wordpress/block-editor\";\r\n\r\nimport { createBlock, store as blocksStore, parse } from \"@wordpress/blocks\";\r\n\r\nimport {Component} from 'react';\r\n\r\nimport \"./store\";\r\n\r\nimport { compose } from '@wordpress/compose';\r\n\r\n import {cookieKey} from './store/constants'\r\n\r\n\r\n\r\nconst Sidebar = (p) => {\r\n    const PluginSidebar = wp.editSite ? wp.editSite.PluginSidebar : PluginSidebarPost;\r\n\r\n    const {getCurrectLanguage, getLanguagesList, \r\n        savePost, isPreview, \r\n        dirtyEntityRecords, siteEntityConfig, siteEdits} = p;\r\n\r\n\r\n    const EntityRecords = useMemo( () => {\r\n        // Remove site object and decouple into its edited pieces.\r\n        const editedEntitiesWithoutSite = dirtyEntityRecords.filter(\r\n            ( record ) => ! ( record.kind === 'root' && record.name === 'site' )\r\n        );\r\n\r\n        const siteEntityLabels = siteEntityConfig?.meta?.labels ?? {};\r\n        const editedSiteEntities = [];\r\n        for ( const property in siteEdits ) {\r\n            editedSiteEntities.push( {\r\n                kind: 'root',\r\n                name: 'site',\r\n                title: siteEntityLabels[ property ] || property,\r\n                property,\r\n            } );\r\n        }\r\n\r\n        return [ ...editedEntitiesWithoutSite, ...editedSiteEntities ];\r\n    }, [ dirtyEntityRecords, siteEdits, siteEntityConfig ] );\r\n\r\n \r\n    // const saveAllEntities = () => {\r\n\r\n    //     const PUBLISH_ON_SAVE_ENTITIES = [\r\n\t// \t\t{ kind: 'postType', name: 'wp_navigation' },\r\n\t// \t];\r\n\r\n    //     const siteItemsToSave = [];\r\n\t// \tconst pendingSavedRecords = [];\r\n\t// \tEntityRecords.forEach( ( { kind, name, key, property } ) => {\r\n\t// \t\tif ( 'root' === kind && 'site' === name ) {\r\n\t// \t\t\tsiteItemsToSave.push( property );\r\n\t// \t\t} else {\r\n\t// \t\t\tif (\r\n\t// \t\t\t\tPUBLISH_ON_SAVE_ENTITIES.some(\r\n\t// \t\t\t\t\t( typeToPublish ) =>\r\n\t// \t\t\t\t\t\ttypeToPublish.kind === kind &&\r\n\t// \t\t\t\t\t\ttypeToPublish.name === name\r\n\t// \t\t\t\t)\r\n\t// \t\t\t) {\r\n\t// \t\t\t\twindow.wp.data\r\n\t// \t\t\t\t\t.dispatch( 'core' )\r\n\t// \t\t\t\t\t.editEntityRecord( kind, name, key, {\r\n\t// \t\t\t\t\t\tstatus: 'publish',\r\n\t// \t\t\t\t\t} );\r\n\t// \t\t\t}  \r\n\r\n\t// \t\t\tpendingSavedRecords.push(\r\n\t// \t\t\t\twindow.wp.data\r\n\t// \t\t\t\t\t.dispatch( 'core' )\r\n\t// \t\t\t\t\t.saveEditedEntityRecord( kind, name, key )\r\n\t// \t\t\t);\r\n\t// \t\t}\r\n\t// \t} );\r\n\t// \tif ( siteItemsToSave.length ) {\r\n\t// \t\tpendingSavedRecords.push(\r\n\t// \t\t\twindow.wp.data\r\n\t// \t\t\t\t.dispatch( 'core' )\r\n\t// \t\t\t\t.__experimentalSaveSpecifiedEntityEdits(\r\n\t// \t\t\t\t\t'root',\r\n\t// \t\t\t\t\t'site',\r\n\t// \t\t\t\t\tundefined,\r\n\t// \t\t\t\t\tsiteItemsToSave\r\n\t// \t\t\t\t)\r\n\t// \t\t);\r\n\t// \t}\r\n\r\n\r\n    //     window.wp.data\r\n    //     .dispatch( 'core/block-editor' )\r\n    //     .__unstableMarkLastChangeAsPersistent();\r\n        \r\n    //     return Promise.all( pendingSavedRecords )\r\n    // }\r\n\r\n    // useEffect(()=>{\r\n    //     console.log(dirtyEntityRecords)\r\n    //     console.log(EntityRecords)\r\n    // },[dirtyEntityRecords, EntityRecords ])\r\n\r\n    const changeLang = useCallback(async (lang) => {\r\n        dispatch('qtranslate-xt').setCurrentLanguage(lang);\r\n        console.log(dirtyEntityRecords)\r\n        console.log(EntityRecords)\r\n  \r\n\r\n        document.cookie = `${cookieKey}=${lang};path=/`;\r\n\r\n        //  await saveAllEntities();\r\n\r\n        addFilter(\r\n            'editor.__unstableSavePost',\r\n            'plugin',\r\n            function(res, option ) {\r\n                removeFilter('editor.__unstableSavePost','plugin');\r\n                \r\n                const wpHTML = window.wp.data.select('core/editor').getCurrentPost().content;\r\n                const blockList = parse( wpHTML );\r\n                // console.log(wpHTML)\r\n                wp.data.dispatch('core/editor').resetEditorBlocks(blockList);\r\n                // console.log(blockList)\r\n    \r\n                return res.then(_ => option)\r\n            });\r\n\r\n          \r\n        window.wp.data\r\n        .dispatch( 'core/block-editor' )\r\n        .__unstableMarkLastChangeAsPersistent();\r\n\r\n        \r\n        // await window.wp.data\r\n        //     .dispatch( 'core' )\r\n        //     .editEntityRecord( 'postType', 'wp_navigation', undefined);\r\n\r\n        await window.wp.data\r\n        .dispatch( 'core' )\r\n        .__experimentalSaveSpecifiedEntityEdits(\r\n            'root',\r\n            'site',\r\n            undefined,\r\n            ['title']\r\n        );\r\n\r\n        await savePost(isPreview);\r\n        window.location.reload();\r\n    })\r\n\r\n    return < >\r\n            <PluginSidebar\r\n                className=\"qtranstale-post\"\r\n                icon={language}\r\n                name=\"qtranstale-post\"\r\n                title={__(\"Qtranslate XT Blocks\", \"qtranslate\")}\r\n            >\r\n            <div className=\"qt-panel-control\">\r\n                    <PanelBody\r\n                        title={__(\"Content Language\", \"qtranslate-xt\")}\r\n                        initialOpen={true}\r\n                    >\r\n                        {/* <HStack className={'editor-post-panel__row'}>\r\n                            <Text as='div' className='editor-post-panel__row-label'>{__(\"Select language:\", \"qtranslate-xt\")}</Text>\r\n                            <Text as='div' className='editor-post-panel__row-control'>\r\n                                <Dropdown \r\n                                    renderToggle={ ( { isOpen, onToggle } ) => (\r\n                                      <Button\r\n                                        variant=\"components-button is-next-40px-default-size is-tertiary\"\r\n                                        onClick={ onToggle }\r\n                                        aria-expanded={ isOpen }\r\n                                      >\r\n                                        {getLanguagesList ? getLanguagesList[getCurrectLanguage]?.name : getCurrectLanguage}\r\n                                      </Button>\r\n                                    )}\r\n                                    label=\"Language\"\r\n                                    renderContent={({ onClose }) => (\r\n                                        <>\r\n                                            <MenuGroup>\r\n                                                {getLanguagesList && Object.entries(getLanguagesList).map(([lang, param]) => (\r\n                                                    <MenuItem onClick={ (p,a) => (changeLang(lang), onClose(p)) }>\r\n                                                        {param.name}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                            </MenuGroup>\r\n                                        </>\r\n                                    )}\r\n                                    />\r\n                            </Text>\r\n                        </HStack> */}\r\n                        <SelectControl\r\n                               label={__(\"Select language:\", \"qtranslate-xt\")}\r\n                               value={getCurrectLanguage}\r\n                               options={ \r\n                                getLanguagesList ? Object.entries(getLanguagesList).map(([lang, param]) => (\r\n                                    { label: param.name, value: lang }\r\n                                )): []}\r\n                               onChange={ changeLang }\r\n                             />\r\n                    </PanelBody>\r\n                </div>\r\n        </PluginSidebar>\r\n \r\n        \r\n    </>\r\n};\r\n\r\n\r\n\r\naddAction('plugins.pluginRegistered', 'plugin', function(\r\n    options, name\r\n) {\r\n      console.log(options, name)\r\n}, 1)\r\n\r\n\r\nconst def = compose([\r\n    withSelect((select) => {\r\n        return {\r\n            getCurrectLanguage: select('qtranslate-xt').getCurrentLanguage(),\r\n            getLanguagesList: select('qtranslate-xt').getLanguages(),\r\n            isPreview: select('core/editor').isPreviewingPost(),\r\n            dirtyEntityRecords: select('core').__experimentalGetDirtyEntityRecords(),\r\n            siteEdits: select('core').getEntityRecordEdits( 'root', 'site' ),\r\n            siteEntityConfig: select('core').getEntityConfig( 'root', 'site' )\r\n        }\r\n    }),\r\n    withDispatch((dispatch) => {\r\n        return {\r\n            savePost: ( isPreview ) => {\r\n\t\t\t\tdispatch('core/editor').savePost({isPreview: isPreview});\r\n\t\t\t},\r\n        };\r\n    })\r\n])\r\n(Sidebar);\r\n\r\nregisterPlugin( 'qtranslate-xt-switch', {\r\n    icon: language,\r\n    render: def,\r\n});\r\n"],"names":["createElement","SVG","xmlns","viewBox","Path","d","setCurrentLanguage","value","type","CURRENT_LANGUAGE","fetchLanguages","FETCH_LANGUAGES","setLanguages","SET_LANGUAGES","cookieKey","cookieArray","document","cookie","matchAll","RegExp","String","raw","next","cookieValue","DEFAULT_STATE","currentLanguage","window","QtranslateAjax","settings","default_language","previousLanguage","languages","action","getSettings","then","response","nonce","admin_nonce","data","FormData","append","fetch","ajax_url","method","body","res","text","JSON","parse","success","catch","err","console","log","store","createReduxStore","reducer","actions","selectors","controls","resolvers","register","subscribe","state","language_config","getLanguages","getCurrentLanguage","getPreviousLanguage","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","addAction","options","name","def","compose","withSelect","select","getCurrectLanguage","getLanguagesList","isPreview","isPreviewingPost","dirtyEntityRecords","__experimentalGetDirtyEntityRecords","siteEdits","getEntityRecordEdits","siteEntityConfig","getEntityConfig","withDispatch","dispatch","savePost","p","PluginSidebar","wp","editSite","PluginSidebarPost","EntityRecords","useMemo","editedEntitiesWithoutSite","filter","record","kind","siteEntityLabels","meta","labels","editedSiteEntities","property","push","title","changeLang","useCallback","async","lang","addFilter","option","removeFilter","wpHTML","getCurrentPost","content","blockList","resetEditorBlocks","_","__unstableMarkLastChangeAsPersistent","__experimentalSaveSpecifiedEntityEdits","location","reload","React","Fragment","className","icon","language","__","PanelBody","initialOpen","SelectControl","label","entries","map","param","onChange","registerPlugin","render"],"sourceRoot":""}